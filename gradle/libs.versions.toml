[versions]
kotlin-all = "1.6.10"
kotlin-extensions = "1.1.5"
kotlinx-coroutines = "1.6.0-native-mt"

spring-framework = "2.5.7"
netty-server = "4.1.74.Final"
abac = "1.1.4"
oauth2 = "5.6.2"
hazelcast-version = "5.0.2"
hazelcast-kube = "1.0.3"

r2dbc-dsl = "4.6.3"
r2dbc-postgres = "0.8.11.RELEASE"
jdbc-postgres = "42.3.3"

feign-client = "3.1.1"
feign-slf4j = "8.18.0"
logback = "1.2.3"

liquibase = "4.7.1"
openapi = "1.5.10"
snake-yaml = "1.29"
picocli = "4.6.1"

test-junit = "4.13.2"
test-reactor = "3.4.9"
test-containers = "1.16.2"

[libraries]
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin-all" }
kotlin-stdlib = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk8", version.ref = "kotlin-all" }
kotlin-extensions = { module = "io.projectreactor.kotlin:reactor-kotlin-extensions", version.ref = "kotlin-extensions" }
kotlin-coroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-reactor", version.ref = "kotlinx-coroutines" }

webflux = { module = "org.springframework.boot:spring-boot-starter-webflux", version.ref = "spring-framework" }
netty-codec = { module = "io.netty:netty-codec-http", version.ref = "netty-server" }
transport = { module = "io.netty:netty-transport-native-epoll", version.ref = "netty-server" }
abac-security = { module = "io.github.sevenparadigms:reactive-spring-abac-security", version.ref = "abac" }
oauth2-server = { module = "org.springframework.security:spring-security-oauth2-resource-server", version.ref = "oauth2" }
hazelcast-server = { module = "com.hazelcast:hazelcast", version.ref = "hazelcast-version" }
embedded-hazelcast = { module = "io.github.sevenparadigms:kubernetes-embedded-hazelcast", version.ref = "hazelcast-kube" }

reactor-dsl = { module = "io.github.sevenparadigms:spring-data-r2dbc-dsl", version.ref = "r2dbc-dsl"}
postgresql = { module = "io.r2dbc:r2dbc-postgresql", version.ref = "r2dbc-postgres"}
postgres-jdbc = { module = "org.postgresql:postgresql", version.ref = "jdbc-postgres"}

reactor-swagger = { module = "org.springdoc:springdoc-openapi-webflux-ui", version.ref = "openapi" }
openapi = { module = "org.springdoc:springdoc-openapi-kotlin", version.ref = "openapi" }
swagger-annotations = { module = "io.swagger.core.v3:swagger-annotations", version = "2.1.12" }

spring-test = { module = "org.springframework.boot:spring-boot-starter-test", version.ref = "spring-framework"}
junit = { module = "junit:junit", version.ref = "test-junit"}
testcontainers = { module = "org.testcontainers:postgresql", version.ref = "test-containers" }
r2dbc-testcontainers = { module = "org.testcontainers:r2dbc", version.ref = "test-containers" }
jupiter-testcontainers = { module = "org.testcontainers:junit-jupiter", version.ref = "test-containers" }
reactor-test = { module = "io.projectreactor:reactor-test", version.ref = "test-reactor" }

feign-webclient = { module = "com.playtika.reactivefeign:feign-reactor-webclient", version.ref = "feign-client" }
feign-cloud = { module = "com.playtika.reactivefeign:feign-reactor-cloud", version.ref = "feign-client" }
feign-spring = { module = "com.playtika.reactivefeign:feign-reactor-spring-configuration", version.ref = "feign-client" }
feign-slf4j = { module = "com.netflix.feign:feign-slf4j", version.ref = "feign-slf4j" }

liquibase-core = { module = "org.liquibase:liquibase-core", version.ref = "liquibase" }
logback-core = { module = "ch.qos.logback:logback-core", version.ref = "logback" }
logback-classic = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
liquibase-yaml = { module = "org.yaml:snakeyaml", version.ref = "snake-yaml"}
liquibase-picocli = { module = "info.picocli:picocli", version.ref = "picocli"}

[bundles]
kotlin = [ "kotlin-reflect", "kotlin-stdlib", "kotlin-extensions", "kotlin-coroutines" ]
service = [ "webflux", "netty-codec", "abac-security", "reactor-dsl", "reactor-swagger", "openapi", "swagger-annotations", "oauth2-server", "hazelcast-server", "embedded-hazelcast" ]
feign = [ "feign-webclient", "feign-cloud", "feign-spring", "feign-slf4j" ]
liquibase = [ "liquibase-core", "logback-core", "logback-classic", "postgres-jdbc", "liquibase-yaml", "liquibase-picocli" ]
test = [ "spring-test", "junit", "reactor-test", "testcontainers", "r2dbc-testcontainers", "jupiter-testcontainers" ]